const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, StringSelectMenuBuilder, ModalBuilder, TextInputBuilder, TextInputStyle } = require('discord.js');
const ms = require('ms');
const License = require('../models/License');
const User = require('../models/Auth');
const config = require('../config.json');
const axios = require('axios');
const FormData = require('form-data');

// ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Nodes
const nodeStatus = {
    'ZETA HUB NODE 1': 'üü¢',
    'ZETA HUB NODE 2': 'üü¢',
    'ZETA HUB NODE 3': 'üü¢',
    'ZETA HUB NODE 4': 'üü¢',
};

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
const userGameSelections = new Map();

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ï‡∏£‡∏¥‡∏á‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
const randomString = function(length) {
    var text = "";
    var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

    for (var i = 0; i < length; i++)
        text += possible.charAt(Math.floor(Math.random() * possible.length));

    return text;
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API True Wallet
async function topUpWithTrueWallet(voucherLink, licenseName) {
    try {
      const response = await axios.post('http://localhost:3000/license/voucher', {
        licenseName: licenseName,
        VoucherCode: voucherLink
      });
  
      if (response.status === 201) {
        return {
          success: true,
          licenseKey: response.data.licenseKey,
          amount: 90
        };
      } else {
        return {
          success: false,
          message: response.data.message || 'Unknown error'
        };
      }
    } catch (err) {
      return {
        success: false,
        message: err.response?.data?.message || err.message || 'Unknown error occurred'
      };
    }
  }
  

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Generate Script ‡πÅ‡∏•‡∏∞ License Key
async function generateScript(userId, gameName) {
    try {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á License Key ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö licenseName + '_' + randomString(25)
        const licenseKey = `${gameName}_${randomString(25)}`;
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á)
        const scriptContent = `-- ZetaHub Script for ${gameName}\n` +
                            `local LicenseKey = "${licenseKey}"\n` +
                            `local UserID = "${userId}"\n` +
                            `local Game = "${gameName}"\n` +
                            `-- Add your script logic here\n` +
                            `print("Hello from ZetaHub! This script is for ${gameName}")\n` +
                            `return { key = LicenseKey, user = UserID, game = Game }`;

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å License Key ‡πÅ‡∏•‡∏∞‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏•‡∏á‡πÉ‡∏ô MongoDB
        const newLicense = new License({
            License: licenseKey,
            Script_Name: gameName,
            Owner: userId,
            Status: 1, // 1 = ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
            Script_Content: scriptContent // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå
        });
        await newLicense.save();

        console.log(`[INFO] Generated License Key for user ${userId}, game: ${gameName}, licenseKey: ${licenseKey}`);
        return {
            licenseKey: licenseKey,
            scriptContent: scriptContent
        };
    } catch (error) {
        console.error(`[ERROR] Failed to generate License Key for user ${userId}:`, error);
        throw new Error("Failed to generate License Key");
    }
}

module.exports = {
    data: new SlashCommandBuilder()
        .setName('setup')
        .setDescription('Set up ZetaHub Pro panel'),
    async execute(interaction) {
        const embed = new EmbedBuilder()
            .setTitle('ZETAHUB.PRO - EXCLUSIVE LUA SCRIPTS')
            .setDescription(`**STATUS:**\n` +
                `- [ZETA HUB NODE 1]: ${nodeStatus['ZETA HUB NODE 1']}\n` +
                `- [ZETA HUB NODE 2]: ${nodeStatus['ZETA HUB NODE 2']}\n` +
                `- [ZETA HUB NODE 3]: ${nodeStatus['ZETA HUB NODE 3']}\n` +
                `- [ZETA HUB NODE 4]: ${nodeStatus['ZETA HUB NODE 4']}`)
            .setImage('https://images-ext-1.discordapp.net/external/Gpm5eU1yoZ7HzUtCq5JqmXwpRjc6hRWAXW3sD4kqiRo/https/m1r.ai/sqW9.png?format=webp&quality=lossless&width=1872&height=623')
            .setFooter({ text: 'by @TheVi' })
            .setColor('#00BFFF');

        const row = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('redeem_license')
                    .setLabel('Redeem License')
                    .setStyle(ButtonStyle.Success),
                new ButtonBuilder()
                    .setCustomId('get_script')
                    .setLabel('Get Script')
                    .setStyle(ButtonStyle.Primary),
                new ButtonBuilder()
                    .setCustomId('buy_script')
                    .setLabel('Buy Script')
                    .setStyle(ButtonStyle.Primary),
                new ButtonBuilder()
                    .setCustomId('reset_identifier')
                    .setLabel('Reset Identifier')
                    .setStyle(ButtonStyle.Danger),
            );

        const row2 = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('claim_monthly')
                    .setLabel('Claim Monthly')
                    .setStyle(ButtonStyle.Secondary),
                new ButtonBuilder()
                    .setCustomId('leaderboard')
                    .setLabel('Leaderboard')
                    .setStyle(ButtonStyle.Secondary),
            );

        await interaction.editReply({ embeds: [embed], components: [row, row2], ephemeral: true });
    },
    handleInteraction: async (interaction, client) => {
        console.log(`[INFO] Interaction received: ${interaction.type}, Custom ID: ${interaction.customId}`);

        if (interaction.isButton()) {
            const clientId = interaction.user.id;

            // ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå Redeem License
            if (interaction.customId === 'redeem_license') {
                // ‡∏™‡∏£‡πâ‡∏≤‡∏á Modal
                const modal = new ModalBuilder()
                    .setCustomId(`redeem_form_${clientId}`)
                    .setTitle('Redeem License Key');
            
                // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å License Key
                const licenseInput = new TextInputBuilder()
                    .setCustomId('license_key')
                    .setLabel('License Key')
                    .setStyle(TextInputStyle.Short)
                    .setPlaceholder('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å License Key ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì')
                    .setRequired(true);
            
                const firstRow = new ActionRowBuilder().addComponents(licenseInput);
                modal.addComponents(firstRow);
            
                // ‡πÅ‡∏™‡∏î‡∏á Modal
                await interaction.showModal(modal);
            }

            // ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå Buy Script
            else if (interaction.customId === 'buy_script') {
                let user = await User.findOne({ Client_ID: clientId });
                if (!user) {
                    user = new User({ Client_ID: clientId });
                    await user.save();
                }

                if (user.Blacklisted) {
                    await interaction.reply({ content: '‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡πÅ‡∏ö‡∏ô‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÑ‡∏î‡πâ!', ephemeral: true });
                    return;
                }

                const games = config.games;
                if (!games || games.length === 0) {
                    await interaction.reply({ content: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô', ephemeral: true });
                    return;
                }

                if (games.length > 25) {
                    await interaction.reply({ content: '‡∏°‡∏µ‡πÄ‡∏Å‡∏°‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Å‡∏°‡πÉ‡∏ô Dropdown', ephemeral: true });
                    return;
                }

                const gameSelectMenu = new StringSelectMenuBuilder()
                    .setCustomId(`select_game_${clientId}`)
                    .setPlaceholder('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠')
                    .addOptions(
                        games.map((game, index) => ({
                            label: `${game.name} - ${game.price} Points`,
                            description: game.description,
                            value: index.toString(),
                        }))
                    );

                const row1 = new ActionRowBuilder().addComponents(gameSelectMenu);

                const row2 = new ActionRowBuilder()
                    .addComponents(
                        new ButtonBuilder()
                            .setCustomId(`cancel_${clientId}`)
                            .setLabel('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å')
                            .setStyle(ButtonStyle.Danger)
                    );

                const gameListEmbed = new EmbedBuilder()
                    .setTitle('üìù ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå')
                    .setDescription(
                        `**‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Å‡∏°**\n` +
                        `‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Å‡∏°‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á\n\n` +
                        `**‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•**\n` +
                        `‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Å‡∏°‡πÅ‡∏•‡πâ‡∏ß ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°:\n` +
                        `- ‡∏•‡∏¥‡∏á‡∏Ñ‡πå ‡∏≠‡∏±‡∏á‡πÄ‡∏õ‡∏≤ True Wallet (‡πÄ‡∏ä‡πà‡∏ô https://gift.truemoney.com/...)`
                    )
                    .setColor('#FFAA00');

                await interaction.reply({ embeds: [gameListEmbed], components: [row1, row2], ephemeral: true });
            }

            // ‡∏õ‡∏∏‡πà‡∏° "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"
            else if (interaction.customId.startsWith('cancel_')) {
                const clientId = interaction.user.id;
                userGameSelections.delete(clientId);

                await interaction.update({
                    embeds: [
                        new EmbedBuilder()
                            .setTitle('üìù ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå')
                            .setDescription('‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß')
                            .setColor('#FF0000')
                    ],
                    components: [],
                    ephemeral: true
                });
            }

            // ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå Get Script
            else if (interaction.customId === 'get_script') {
                const clientId = interaction.user.id;

                try {
                    const response = await axios.post(`${config.api}/users/getscript?adminKey=${config.apikey}`, {
                        userId: clientId
                    });
            
                    const license = `${response.data.encryptedData}:${response.data.tag}`;
            
                    const ScriptEmbed = new EmbedBuilder()
                        .setColor('#00fffb')
                        .setImage('https://i.pinimg.com/originals/ec/e2/20/ece220bf046ef858e05c4c2e504fd262.gif')
                        .addFields({
                            name: 'Zeta Hub Script',
                            value: `\`\`\`lua\n_G.Keys = '${license}'\nloadstring(game:HttpGet('https://raw.githubusercontent.com/rayrei0112/zetahub_loard/main/zetahub.lua'))();\n\`\`\``,
                            inline: true
                        })
                        .setFooter({ text: 'Powered by Nexus Client & Zeta Hub' })
                        .setTimestamp();
            
                    await interaction.reply({ embeds: [ScriptEmbed], ephemeral: true });
                } catch (error) {
                    console.error('[Get Script Error]', error);
                    await interaction.reply({
                        content: `‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÑ‡∏î‡πâ: ${error.response?.data?.message || error.message}`,
                        ephemeral: true
                    });
                }
            }

            // ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå Reset Identifier
            else if (interaction.customId === 'reset_identifier') {
                const clientId = interaction.user.id;
                
                try {
                    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ role buyer ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    const member = interaction.guild.members.cache.get(clientId);
                    if (!member.roles.cache.has(config['buyers-roles'])) {
                        await interaction.reply({ 
                            content: 'You are not allowed to use this command.', 
                            ephemeral: true 
                        });
                        return;
                    }
            
                    // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° header ‡πÅ‡∏•‡∏∞ body ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API
                    let headersList = {
                        "Accept": "*/*",
                        "Content-Type": "application/json"
                    };
            
                    let bodyContent = JSON.stringify({
                        "userId": clientId
                    });
            
                    let reqOptions = {
                        url: config.api + "/users/resethwid?adminKey=" + config.apikey,
                        method: "POST",
                        headers: headersList,
                        data: bodyContent,
                    };
            
                    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
                    let response = await axios.request(reqOptions);
            
                    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÉ‡∏ô database
                    let user = await User.findOne({ Client_ID: clientId });
                    if (!user) {
                        user = new User({
                            Client_ID: clientId,
                            Identifier: 'IDENTIFIER-' + Math.random().toString(36).substring(2, 15),
                        });
                        await user.save();
                        await interaction.reply({ 
                            content: `Identifier ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà: ${user.Identifier}\nAPI Response: ${response.data.message}`, 
                            ephemeral: true 
                        });
                    } else {
                        const oldIdentifier = user.Identifier;
                        user.Last_Identifier = oldIdentifier;
                        user.Identifier = 'IDENTIFIER-' + Math.random().toString(36).substring(2, 15);
                        await user.save();
                        await interaction.reply({ 
                            content: `Identifier ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÅ‡∏•‡πâ‡∏ß!\n‡πÄ‡∏Å‡πà‡∏≤: ${oldIdentifier} -> ‡πÉ‡∏´‡∏°‡πà: ${user.Identifier}\nAPI Response: ${response.data.message}`, 
                            ephemeral: true 
                        });
                    }
                } catch (error) {
                    console.log(error);
                    let errorMessages = error.response?.data?.message || error.message;
                    await interaction.reply({ 
                        content: `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${errorMessages}`, 
                        ephemeral: true 
                    });
                }
            }

            // ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå Claim Monthly
            else if (interaction.customId === 'claim_monthly') {
                const now = Date.now();
                const cooldown = ms('30d');

                let user = await User.findOne({ Client_ID: clientId });
                if (!user) {
                    user = new User({ Client_ID: clientId });
                }

                if (user.Blacklisted) {
                    await interaction.reply({ content: '‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡πÅ‡∏ö‡∏ô‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÑ‡∏î‡πâ!', ephemeral: true });
                    return;
                }

                const lastClaim = user.Cooldown || 0;
                if (now - lastClaim < cooldown) {
                    const timeLeft = ms(cooldown - (now - lastClaim), { long: true });
                    await interaction.reply({ content: `‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô ${timeLeft}!`, ephemeral: true });
                } else {
                    user.Cooldown = now;
                    user.Points += 20;
                    await user.save();
                    await interaction.reply({ content: `‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö 20 Points! ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ ${user.Points} Points.`, ephemeral: true });
                }
            }

            // ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå Leaderboard
            else if (interaction.customId === 'leaderboard') {
                const leaderboard = await User.find()
                    .sort({ Licenses: -1 })
                    .limit(5);

                if (leaderboard.length === 0) {
                    await interaction.reply({ content: 'Leaderboard ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤!', ephemeral: true });
                    return;
                }

                const embed = new EmbedBuilder()
                    .setTitle('üèÜ Leaderboard')
                    .setDescription(
                        leaderboard
                            .map((user, index) => `${index + 1}. <@${user.Client_ID}> - ${user.Licenses.length} Licenses\n` +
                                `Scripts: ${user.Assets.join(', ') || 'None'}\nPoints: ${user.Points}`)
                            .join('\n\n')
                    )
                    .setColor('#FFD700');

                await interaction.reply({ embeds: [embed], ephemeral: true });
            }
        }

        // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Select Menu (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Å‡∏°)
        if (interaction.isStringSelectMenu()) {
            if (interaction.customId.startsWith('select_game_')) {
                try {
                    console.log(`[INTERACTION] select_game_${interaction.user.id} started`);

                    const clientId = interaction.user.id;
                    const gameIndex = parseInt(interaction.values[0]);
                    const games = config.games;

                    if (gameIndex < 0 || gameIndex >= games.length) {
                        console.log(`[ERROR] Invalid gameIndex: ${gameIndex}, games length: ${games.length}`);
                        await interaction.reply({
                            embeds: [
                                new EmbedBuilder()
                                    .setTitle('üìù ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î')
                                    .setDescription('‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á')
                                    .setColor('#FF0000')
                            ],
                            ephemeral: true
                        });
                        return;
                    }

                    const selectedGame = games[gameIndex];
                    console.log(`[INFO] User ${clientId} selected game: ${selectedGame.name}`);

                    userGameSelections.set(clientId, selectedGame);

                    const modal = new ModalBuilder()
                        .setCustomId(`purchase_form_${clientId}`)
                        .setTitle('‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå');

                    const walletLinkInput = new TextInputBuilder()
                        .setCustomId('wallet_link')
                        .setLabel('‡∏•‡∏¥‡∏á‡∏Ñ‡πå ‡∏≠‡∏±‡∏á‡πÄ‡∏õ‡∏≤ True Wallet')
                        .setStyle(TextInputStyle.Short)
                        .setPlaceholder('‡πÄ‡∏ä‡πà‡∏ô https://gift.truemoney.com/...')
                        .setRequired(true);

                    const firstRow = new ActionRowBuilder().addComponents(walletLinkInput);
                    modal.addComponents(firstRow);

                    console.log(`[INFO] Showing modal for user ${clientId}`);
                    await interaction.showModal(modal);
                } catch (error) {
                    console.error('Error in select_game interaction:', error);
                    await interaction.reply({
                        embeds: [
                            new EmbedBuilder()
                                .setTitle('üìù ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î')
                                .setDescription('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Å‡∏°! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á')
                                .setColor('#FF0000')
                        ],
                        ephemeral: true
                    });
                }
            }
        }

        // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Modal Submission (‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î Submit ‡πÉ‡∏ô Modal)
        if (interaction.isModalSubmit()) {
            console.log(`[INFO] Modal submit interaction received: ${interaction.customId}`);
            if (interaction.customId.startsWith('purchase_form_')) {
                const clientId = interaction.user.id;
                console.log(`[INFO] Modal submitted by user ${clientId}`);
        
                try {
                    const walletLink = interaction.fields.getTextInputValue('wallet_link');
                    console.log(`[INFO] Wallet link: ${walletLink}`);
        
                    if (!walletLink.startsWith('http') || !walletLink.includes('gift.truemoney.com') || !walletLink.includes('v=')) {
                        console.log('[ERROR] Wallet link validation failed');
                        await interaction.reply({ content: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏•‡∏¥‡∏á‡∏Ñ‡πå True Wallet ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡πÄ‡∏ä‡πà‡∏ô https://gift.truemoney.com/campaign/?v=...)!', ephemeral: true });
                        return;
                    }
        
                    const selectedGame = userGameSelections.get(clientId);
                    if (!selectedGame) {
                        console.log('[ERROR] Selected game not found');
                        await interaction.reply({ content: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà', ephemeral: true });
                        return;
                    }
        
                    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏ù‡∏±‡πà‡∏á Server
                    const response = await axios.post('http://localhost:3000/license/voucher', {
                        licenseName: selectedGame.name,
                        VoucherCode: walletLink
                    });
        
                    if (response.status !== 201) {
                        await interaction.reply({ content: `‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÑ‡∏î‡πâ: ${response.data.message || 'Unknown error'}`, ephemeral: true });
                        return;
                    }
        
                    const licenseKey = response.data.licenseKey;
                    const amount = response.data.amount || 90; // fallback
        
                    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ‡∏´‡∏±‡∏Å‡πÅ‡∏ï‡πâ‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° License (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
                    let user = await User.findOne({ Client_ID: clientId });
                    const gamePrice = selectedGame.price;
        
                    if (!user) {
                        user = new User({ Client_ID: clientId, Points: 0 });
                    }
        
                    if (user.Points < gamePrice) {
                        await interaction.reply({
                            content: `‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ Points ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠! ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ${gamePrice} Points ‡πÅ‡∏ï‡πà‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ ${user.Points} Points`,
                            ephemeral: true
                        });
                        return;
                    }
        
                    if (user.Assets.includes(selectedGame.value)) {
                        await interaction.reply({ content: `‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå ${selectedGame.name} ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß!`, ephemeral: true });
                        return;
                    }
        
                    user.Points -= gamePrice;
                    user.Assets.push(selectedGame.value);
                    user.Licenses.push(licenseKey);
                    await user.save();
        
                    // ‡πÄ‡∏û‡∏¥‡πà‡∏° Role ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
                    try {
                        const member = interaction.guild.members.cache.get(clientId);
                        const buyerRoleId = config['buyers-roles'];
                        await member.roles.add(buyerRoleId);
                        console.log(`Added Buyer role (${buyerRoleId}) to user ${clientId}`);
                    } catch (error) {
                        console.error(`Failed to add Buyer role to user ${clientId}:`, error);
                    }
        
                    await interaction.reply({
                        embeds: [
                            new EmbedBuilder()
                                .setTitle('üìù ‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
                                .setDescription(
                                    `‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö ${selectedGame.name} ‡πÅ‡∏•‡∏∞ Role Buyer\n` +
                                    `‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ ${gamePrice} Points (‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${user.Points} Points)\n` +
                                    `‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏ú‡πà‡∏≤‡∏ô True Wallet: ${amount} ‡∏ö‡∏≤‡∏ó\n\n` +
                                    `**License Key:** \`${licenseKey}\`\n` +
                                    `‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ô‡∏≥ License Key ‡πÑ‡∏õ Redeem ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô`
                                )
                                .setColor('#00FF00')
                        ],
                        ephemeral: true
                    });
        
                    userGameSelections.delete(clientId);
                } catch (error) {
                    console.error('Error in purchase_form submission:', error);
                    await interaction.reply({
                        embeds: [
                            new EmbedBuilder()
                                .setTitle('üìù ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î')
                                .setDescription(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.response?.data?.message || error.message}`)
                                .setColor('#FF0000')
                        ],
                        ephemeral: true
                    });
                    userGameSelections.delete(clientId);
                }
            } else if (interaction.customId.startsWith('redeem_form_')) {
                const clientId = interaction.user.id;
                
                try {
                    const licenseKey = interaction.fields.getTextInputValue('license_key');
                    
                    const response = await axios.post('http://localhost:3000/license/activate', {
                        licenseKey,
                        userid: clientId
                    });

                    if (response.status === 201 || response.status === 200) {
                        await interaction.reply({ 
                            content: `‚úÖ License redeemed! ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö script: ${response.data.licenseName || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠'}`,
                            ephemeral: true 
                        });
                    } else {
                        await interaction.reply({ 
                            content: `‚ùå Redeem ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${response.data.message}`,
                            ephemeral: true 
                        });
                    }
                } catch (err) {
                    await interaction.reply({ 
                        content: `‚ùå Redeem ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${err.response?.data?.message || err.message}`,
                        ephemeral: true 
                    });
                }
            } else {
                console.log(`[INFO] Modal submit ignored, customId does not match: ${interaction.customId}`);
            }
        }        
    },
};




// const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, StringSelectMenuBuilder, ModalBuilder, TextInputBuilder, TextInputStyle } = require('discord.js');
// const ms = require('ms');
// const License = require('../models/License');
// const User = require('../models/Auth');
// const config = require('../config.json');
// const axios = require('axios');
// const FormData = require('form-data');

// // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Nodes
// const nodeStatus = {
//     'ZETA HUB NODE 1': 'üü¢',
//     'ZETA HUB NODE 2': 'üü¢',
//     'ZETA HUB NODE 3': 'üü¢',
//     'ZETA HUB NODE 4': 'üü¢',
// };

// // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
// const userGameSelections = new Map();

// // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ï‡∏£‡∏¥‡∏á‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
// const randomString = function(length) {
//     var text = "";
//     var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

//     for (var i = 0; i < length; i++)
//         text += possible.charAt(Math.floor(Math.random() * possible.length));

//     return text;
// };

// // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API True Wallet
// async function topUpWithTrueWallet(voucherLink, licenseName) {
//     try {
//       const response = await axios.post('http://localhost:3000/license/voucher', {
//         licenseName: licenseName,
//         VoucherCode: voucherLink
//       });
  
//       if (response.status === 201) {
//         return {
//           success: true,
//           licenseKey: response.data.licenseKey,
//           amount: 90
//         };
//       } else {
//         return {
//           success: false,
//           message: response.data.message || 'Unknown error'
//         };
//       }
//     } catch (err) {
//       return {
//         success: false,
//         message: err.response?.data?.message || err.message || 'Unknown error occurred'
//       };
//     }
//   }
  

// // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Generate Script ‡πÅ‡∏•‡∏∞ License Key
// async function generateScript(userId, gameName) {
//     try {
//         // ‡∏™‡∏£‡πâ‡∏≤‡∏á License Key ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö licenseName + '_' + randomString(25)
//         const licenseKey = `${gameName}_${randomString(25)}`;
        
//         // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á)
//         const scriptContent = `-- ZetaHub Script for ${gameName}\n` +
//                             `local LicenseKey = "${licenseKey}"\n` +
//                             `local UserID = "${userId}"\n` +
//                             `local Game = "${gameName}"\n` +
//                             `-- Add your script logic here\n` +
//                             `print("Hello from ZetaHub! This script is for ${gameName}")\n` +
//                             `return { key = LicenseKey, user = UserID, game = Game }`;

//         // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å License Key ‡πÅ‡∏•‡∏∞‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏•‡∏á‡πÉ‡∏ô MongoDB
//         const newLicense = new License({
//             License: licenseKey,
//             Script_Name: gameName,
//             Owner: userId,
//             Status: 1, // 1 = ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
//             Script_Content: scriptContent // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå
//         });
//         await newLicense.save();

//         console.log(`[INFO] Generated License Key for user ${userId}, game: ${gameName}, licenseKey: ${licenseKey}`);
//         return {
//             licenseKey: licenseKey,
//             scriptContent: scriptContent
//         };
//     } catch (error) {
//         console.error(`[ERROR] Failed to generate License Key for user ${userId}:`, error);
//         throw new Error("Failed to generate License Key");
//     }
// }

// module.exports = {
//     data: new SlashCommandBuilder()
//         .setName('setup')
//         .setDescription('Set up ZetaHub Pro panel'),
//     async execute(interaction) {
//         const embed = new EmbedBuilder()
//             .setTitle('ZETAHUB.PRO - EXCLUSIVE LUA SCRIPTS')
//             .setDescription(`**STATUS:**\n` +
//                 `- [ZETA HUB NODE 1]: ${nodeStatus['ZETA HUB NODE 1']}\n` +
//                 `- [ZETA HUB NODE 2]: ${nodeStatus['ZETA HUB NODE 2']}\n` +
//                 `- [ZETA HUB NODE 3]: ${nodeStatus['ZETA HUB NODE 3']}\n` +
//                 `- [ZETA HUB NODE 4]: ${nodeStatus['ZETA HUB NODE 4']}`)
//             .setImage('https://images-ext-1.discordapp.net/external/Gpm5eU1yoZ7HzUtCq5JqmXwpRjc6hRWAXW3sD4kqiRo/https/m1r.ai/sqW9.png?format=webp&quality=lossless&width=1872&height=623')
//             .setFooter({ text: 'by @TheVi' })
//             .setColor('#00BFFF');

//         const row = new ActionRowBuilder()
//             .addComponents(
//                 new ButtonBuilder()
//                     .setCustomId('redeem_license')
//                     .setLabel('Redeem License')
//                     .setStyle(ButtonStyle.Success),
//                 new ButtonBuilder()
//                     .setCustomId('get_script')
//                     .setLabel('Get Script')
//                     .setStyle(ButtonStyle.Primary),
//                 new ButtonBuilder()
//                     .setCustomId('buy_script')
//                     .setLabel('Buy Script')
//                     .setStyle(ButtonStyle.Primary),
//                 new ButtonBuilder()
//                     .setCustomId('reset_identifier')
//                     .setLabel('Reset Identifier')
//                     .setStyle(ButtonStyle.Danger),
//             );

//         const row2 = new ActionRowBuilder()
//             .addComponents(
//                 new ButtonBuilder()
//                     .setCustomId('claim_monthly')
//                     .setLabel('Claim Monthly')
//                     .setStyle(ButtonStyle.Secondary),
//                 new ButtonBuilder()
//                     .setCustomId('leaderboard')
//                     .setLabel('Leaderboard')
//                     .setStyle(ButtonStyle.Secondary),
//             );

//         await interaction.editReply({ embeds: [embed], components: [row, row2], ephemeral: true });
//     },
//     handleInteraction: async (interaction, client) => {
//         console.log(`[INFO] Interaction received: ${interaction.type}, Custom ID: ${interaction.customId}`);

//         if (interaction.isButton()) {
//             const clientId = interaction.user.id;

//             // ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå Redeem License
//             if (interaction.customId === 'redeem_license') {
//                 await interaction.reply({ content: 'Please enter your License Key to redeem!', ephemeral: true });

//                 const filter = (m) => m.author.id === interaction.user.id;
//                 const collector = interaction.channel.createMessageCollector({ filter, time: 15000 });

//                 collector.on('collect', async (m) => {
//                     const licenseKey = m.content;
//                     try {
//                     const response = await axios.post('http://localhost:3000/license/activate', {
//                         licenseKey,
//                         userid: clientId
//                     });

//                     if (response.status === 201 || response.status === 200) {
//                         await m.reply(`‚úÖ License redeemed! ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö script: ${response.data.licenseName || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠'}`);
//                     } else {
//                         await m.reply(`‚ùå Redeem ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${response.data.message}`);
//                     }
//                     } catch (err) {
//                     await m.reply(`‚ùå Redeem ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${err.response?.data?.message || err.message}`);
//                     }
//                     collector.stop();
//                 });

//                 collector.on('end', (collected, reason) => {
//                     if (reason === 'time') {
//                         interaction.followUp({ content: 'Time‚Äôs up! Please try again.', ephemeral: true });
//                     }
//                 });
//             }

//             // ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå Buy Script
//             else if (interaction.customId === 'buy_script') {
//                 let user = await User.findOne({ Client_ID: clientId });
//                 if (!user) {
//                     user = new User({ Client_ID: clientId });
//                     await user.save();
//                 }

//                 if (user.Blacklisted) {
//                     await interaction.reply({ content: '‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡πÅ‡∏ö‡∏ô‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÑ‡∏î‡πâ!', ephemeral: true });
//                     return;
//                 }

//                 const games = config.games;
//                 if (!games || games.length === 0) {
//                     await interaction.reply({ content: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô', ephemeral: true });
//                     return;
//                 }

//                 if (games.length > 25) {
//                     await interaction.reply({ content: '‡∏°‡∏µ‡πÄ‡∏Å‡∏°‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Å‡∏°‡πÉ‡∏ô Dropdown', ephemeral: true });
//                     return;
//                 }

//                 const gameSelectMenu = new StringSelectMenuBuilder()
//                     .setCustomId(`select_game_${clientId}`)
//                     .setPlaceholder('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠')
//                     .addOptions(
//                         games.map((game, index) => ({
//                             label: `${game.name} - ${game.price} Points`,
//                             description: game.description,
//                             value: index.toString(),
//                         }))
//                     );

//                 const row1 = new ActionRowBuilder().addComponents(gameSelectMenu);

//                 const row2 = new ActionRowBuilder()
//                     .addComponents(
//                         new ButtonBuilder()
//                             .setCustomId(`cancel_${clientId}`)
//                             .setLabel('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å')
//                             .setStyle(ButtonStyle.Danger)
//                     );

//                 const gameListEmbed = new EmbedBuilder()
//                     .setTitle('üìù ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå')
//                     .setDescription(
//                         `**‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Å‡∏°**\n` +
//                         `‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Å‡∏°‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á\n\n` +
//                         `**‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•**\n` +
//                         `‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Å‡∏°‡πÅ‡∏•‡πâ‡∏ß ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°:\n` +
//                         `- ‡∏•‡∏¥‡∏á‡∏Ñ‡πå ‡∏≠‡∏±‡∏á‡πÄ‡∏õ‡∏≤ True Wallet (‡πÄ‡∏ä‡πà‡∏ô https://gift.truemoney.com/...)`
//                     )
//                     .setColor('#FFAA00');

//                 await interaction.reply({ embeds: [gameListEmbed], components: [row1, row2], ephemeral: true });
//             }

//             // ‡∏õ‡∏∏‡πà‡∏° "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"
//             else if (interaction.customId.startsWith('cancel_')) {
//                 const clientId = interaction.user.id;
//                 userGameSelections.delete(clientId);

//                 await interaction.update({
//                     embeds: [
//                         new EmbedBuilder()
//                             .setTitle('üìù ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå')
//                             .setDescription('‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß')
//                             .setColor('#FF0000')
//                     ],
//                     components: [],
//                     ephemeral: true
//                 });
//             }

//             // ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå Get Script
//             else if (interaction.customId === 'get_script') {
//                 const user = await User.findOne({ Client_ID: clientId });
//                 if (!user || user.Licenses.length === 0) {
//                     await interaction.reply({ content: '‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á Redeem License Key ‡∏Å‡πà‡∏≠‡∏ô‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡∏£‡∏±‡∏ö‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÑ‡∏î‡πâ!', ephemeral: true });
//                     return;
//                 }

//                 // ‡∏î‡∏∂‡∏á‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏à‡∏≤‡∏Å MongoDB
//                 const licenses = await License.find({ Owner: clientId, Status: 1 });
//                 if (!licenses || licenses.length === 0) {
//                     await interaction.reply({ content: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á!', ephemeral: true });
//                     return;
//                 }

//                 const scriptList = licenses.map(license => `**${license.Script_Name}** (Key: ${license.License})\n\`\`\`lua\n${license.Script_Content || 'No script content available'}\n\`\`\``).join('\n\n');
//                 await interaction.reply({ content: `‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:\n${scriptList}`, ephemeral: true });
//             }

//             // ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå Reset Identifier
//             else if (interaction.customId === 'reset_identifier') {
//                 let user = await User.findOne({ Client_ID: clientId });
//                 if (!user) {
//                     user = new User({
//                         Client_ID: clientId,
//                         Identifier: 'IDENTIFIER-' + Math.random().toString(36).substring(2, 15),
//                     });
//                     await user.save();
//                     await interaction.reply({ content: `Identifier ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ${user.Identifier}`, ephemeral: true });
//                 } else {
//                     const oldIdentifier = user.Identifier;
//                     user.Last_Identifier = oldIdentifier;
//                     user.Identifier = 'IDENTIFIER-' + Math.random().toString(36).substring(2, 15);
//                     await user.save();
//                     await interaction.reply({ content: `Identifier ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÅ‡∏•‡πâ‡∏ß! ‡πÄ‡∏Å‡πà‡∏≤: ${oldIdentifier} -> ‡πÉ‡∏´‡∏°‡πà: ${user.Identifier}`, ephemeral: true });
//                 }
//             }

//             // ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå Claim Monthly
//             else if (interaction.customId === 'claim_monthly') {
//                 const now = Date.now();
//                 const cooldown = ms('30d');

//                 let user = await User.findOne({ Client_ID: clientId });
//                 if (!user) {
//                     user = new User({ Client_ID: clientId });
//                 }

//                 if (user.Blacklisted) {
//                     await interaction.reply({ content: '‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡πÅ‡∏ö‡∏ô‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÑ‡∏î‡πâ!', ephemeral: true });
//                     return;
//                 }

//                 const lastClaim = user.Cooldown || 0;
//                 if (now - lastClaim < cooldown) {
//                     const timeLeft = ms(cooldown - (now - lastClaim), { long: true });
//                     await interaction.reply({ content: `‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô ${timeLeft}!`, ephemeral: true });
//                 } else {
//                     user.Cooldown = now;
//                     user.Points += 20;
//                     await user.save();
//                     await interaction.reply({ content: `‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö 20 Points! ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ ${user.Points} Points.`, ephemeral: true });
//                 }
//             }

//             // ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå Leaderboard
//             else if (interaction.customId === 'leaderboard') {
//                 const leaderboard = await User.find()
//                     .sort({ Licenses: -1 })
//                     .limit(5);

//                 if (leaderboard.length === 0) {
//                     await interaction.reply({ content: 'Leaderboard ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤!', ephemeral: true });
//                     return;
//                 }

//                 const embed = new EmbedBuilder()
//                     .setTitle('üèÜ Leaderboard')
//                     .setDescription(
//                         leaderboard
//                             .map((user, index) => `${index + 1}. <@${user.Client_ID}> - ${user.Licenses.length} Licenses\n` +
//                                 `Scripts: ${user.Assets.join(', ') || 'None'}\nPoints: ${user.Points}`)
//                             .join('\n\n')
//                     )
//                     .setColor('#FFD700');

//                 await interaction.reply({ embeds: [embed], ephemeral: true });
//             }
//         }

//         // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Select Menu (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Å‡∏°)
//         if (interaction.isStringSelectMenu()) {
//             if (interaction.customId.startsWith('select_game_')) {
//                 try {
//                     console.log(`[INTERACTION] select_game_${interaction.user.id} started`);

//                     const clientId = interaction.user.id;
//                     const gameIndex = parseInt(interaction.values[0]);
//                     const games = config.games;

//                     if (gameIndex < 0 || gameIndex >= games.length) {
//                         console.log(`[ERROR] Invalid gameIndex: ${gameIndex}, games length: ${games.length}`);
//                         await interaction.reply({
//                             embeds: [
//                                 new EmbedBuilder()
//                                     .setTitle('üìù ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î')
//                                     .setDescription('‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á')
//                                     .setColor('#FF0000')
//                             ],
//                             ephemeral: true
//                         });
//                         return;
//                     }

//                     const selectedGame = games[gameIndex];
//                     console.log(`[INFO] User ${clientId} selected game: ${selectedGame.name}`);

//                     userGameSelections.set(clientId, selectedGame);

//                     const modal = new ModalBuilder()
//                         .setCustomId(`purchase_form_${clientId}`)
//                         .setTitle('‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå');

//                     const walletLinkInput = new TextInputBuilder()
//                         .setCustomId('wallet_link')
//                         .setLabel('‡∏•‡∏¥‡∏á‡∏Ñ‡πå ‡∏≠‡∏±‡∏á‡πÄ‡∏õ‡∏≤ True Wallet')
//                         .setStyle(TextInputStyle.Short)
//                         .setPlaceholder('‡πÄ‡∏ä‡πà‡∏ô https://gift.truemoney.com/...')
//                         .setRequired(true);

//                     const firstRow = new ActionRowBuilder().addComponents(walletLinkInput);
//                     modal.addComponents(firstRow);

//                     console.log(`[INFO] Showing modal for user ${clientId}`);
//                     await interaction.showModal(modal);
//                 } catch (error) {
//                     console.error('Error in select_game interaction:', error);
//                     await interaction.reply({
//                         embeds: [
//                             new EmbedBuilder()
//                                 .setTitle('üìù ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î')
//                                 .setDescription('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Å‡∏°! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á')
//                                 .setColor('#FF0000')
//                         ],
//                         ephemeral: true
//                     });
//                 }
//             }
//         }

//         // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Modal Submission (‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î Submit ‡πÉ‡∏ô Modal)
//         if (interaction.isModalSubmit()) {
//             console.log(`[INFO] Modal submit interaction received: ${interaction.customId}`);
//             if (interaction.customId.startsWith('purchase_form_')) {
//                 const clientId = interaction.user.id;
//                 console.log(`[INFO] Modal submitted by user ${clientId}`);

//                 try {
//                     console.log('[INFO] Fetching wallet link from modal');
//                     const walletLink = interaction.fields.getTextInputValue('wallet_link');
//                     console.log(`[INFO] Wallet link: ${walletLink}`);

//                     console.log('[INFO] Validating wallet link');
//                     if (!walletLink.startsWith('http') || !walletLink.includes('gift.truemoney.com') || !walletLink.includes('v=')) {
//                         console.log('[ERROR] Wallet link validation failed');
//                         await interaction.reply({ content: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏•‡∏¥‡∏á‡∏Ñ‡πå True Wallet ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡πÄ‡∏ä‡πà‡∏ô https://gift.truemoney.com/campaign/?v=...)!', ephemeral: true });
//                         return;
//                     }

//                     console.log('[INFO] Checking voucher code length');
//                     const codeMatch = walletLink.match(/v=([A-Za-z0-9]+)/);
//                     if (!codeMatch || codeMatch[1].length !== 9) {
//                         console.log(`[ERROR] Invalid voucher code length: ${codeMatch ? codeMatch[1].length : 'N/A'}`);
//                         await interaction.reply({ content: '‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏ô‡∏•‡∏¥‡∏á‡∏Ñ‡πå True Wallet ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß 9 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ (‡πÄ‡∏ä‡πà‡∏ô https://gift.truemoney.com/campaign/?v=XXXXXXXXX)!', ephemeral: true });
//                         return;
//                     }

//                     console.log('[INFO] Calling True Wallet API');
//                     let topUpResult;
//                     try {
//                         topUpResult = await topUpWithTrueWallet(walletLink);
//                         if (!topUpResult.success) {
//                             console.log(`[ERROR] True Wallet top up failed: ${topUpResult.message}`);
//                             await interaction.reply({
//                                 embeds: [
//                                     new EmbedBuilder()
//                                         .setTitle('üìù ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß')
//                                         .setDescription(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ: ${topUpResult.message}`)
//                                         .setColor('#FF0000')
//                                 ],
//                                 ephemeral: true
//                             });
//                             return;
//                         }
//                     } catch (error) {
//                         console.error('Error during True Wallet top up:', error);
//                         await interaction.reply({
//                             embeds: [
//                                 new EmbedBuilder()
//                                     .setTitle('üìù ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß')
//                                     .setDescription(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô: ${error.message}`)
//                                     .setColor('#FF0000')
//                             ],
//                             ephemeral: true
//                         });
//                         return;
//                     }

//                     const topUpAmount = topUpResult.amount;
//                     console.log(`[INFO] Top up successful, amount: ${topUpAmount}`);

//                     console.log('[INFO] Fetching selected game');
//                     const selectedGame = userGameSelections.get(clientId);
//                     if (!selectedGame) {
//                         console.log('[ERROR] Selected game not found');
//                         await interaction.reply({ content: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà', ephemeral: true });
//                         return;
//                     }

//                     const gamePrice = selectedGame.price;
//                     const totalPoints = gamePrice;
//                     let user = await User.findOne({ Client_ID: clientId });

//                     console.log(`User Points: ${user.Points}, Total Points Needed: ${totalPoints}`);

//                     if (user.Points < totalPoints) {
//                         console.log('[ERROR] Insufficient points');
//                         await interaction.reply({ content: `‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ Points ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠! ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ${totalPoints} Points ‡πÅ‡∏ï‡πà‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ ${user.Points} Points`, ephemeral: true });
//                         userGameSelections.delete(clientId);
//                         return;
//                     }

//                     if (user.Assets.includes(selectedGame.value)) {
//                         console.log(`[ERROR] User already owns script: ${selectedGame.name}`);
//                         await interaction.reply({ content: `‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå ${selectedGame.name} ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß!`, ephemeral: true });
//                         userGameSelections.delete(clientId);
//                         return;
//                     }

//                     // Generate License Key ‡πÅ‡∏•‡∏∞ Script ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
//                     let generatedScript;
//                     try {
//                         generatedScript = await generateScript(clientId, selectedGame.name);
//                     } catch (error) {
//                         console.error('Error generating License Key:', error);
//                         await interaction.reply({
//                             embeds: [
//                                 new EmbedBuilder()
//                                     .setTitle('üìù ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î')
//                                     .setDescription('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á License Key ‡πÑ‡∏î‡πâ! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô')
//                                     .setColor('#FF0000')
//                             ],
//                             ephemeral: true
//                         });
//                         userGameSelections.delete(clientId);
//                         return;
//                     }

//                     // ‡∏´‡∏±‡∏Å Points ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå
//                     user.Points -= totalPoints;
//                     user.Assets.push(selectedGame.value);
//                     user.Licenses.push(generatedScript.licenseKey); // ‡πÄ‡∏û‡∏¥‡πà‡∏° License Key ‡∏•‡∏á‡πÉ‡∏ô Licenses ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ

//                     // ‡πÄ‡∏û‡∏¥‡πà‡∏° Role ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
//                     try {
//                         const member = interaction.guild.members.cache.get(clientId);
//                         const buyerRoleId = config['buyers-roles'];
//                         await member.roles.add(buyerRoleId);
//                         console.log(`Added Buyer role (${buyerRoleId}) to user ${clientId}`);
//                     } catch (error) {
//                         console.error(`Failed to add Buyer role to user ${clientId}:`, error);
//                         await interaction.reply({ content: `‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° Role ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô! ‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ ${totalPoints} Points (‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${user.Points} Points)`, ephemeral: true });
//                         userGameSelections.delete(clientId);
//                         return;
//                     }

//                     await user.save();

//                     userGameSelections.delete(clientId);

//                     await interaction.reply({
//                         embeds: [
//                             new EmbedBuilder()
//                                 .setTitle('üìù ‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
//                                 .setDescription(
//                                     `‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö ${selectedGame.name} ‡πÅ‡∏•‡∏∞ Role Buyer\n` +
//                                     `‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ ${totalPoints} Points (‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${user.Points} Points)\n` +
//                                     `‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏ú‡πà‡∏≤‡∏ô True Wallet: ${topUpAmount} ‡∏ö‡∏≤‡∏ó\n\n` +
//                                     `**License Key: ${generatedScript.licenseKey}**\n` +
//                                     `**‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì**\n` +
//                                     `\`\`\`lua\n${generatedScript.scriptContent}\n\`\`\``
//                                 )
//                                 .setColor('#00FF00')
//                         ],
//                         ephemeral: true
//                     });
//                     console.log(`[INFO] Purchase successful for user ${clientId}`);
//                 } catch (error) {
//                     console.error('Error in purchase_form submission:', error);
//                     await interaction.reply({
//                         embeds: [
//                             new EmbedBuilder()
//                                 .setTitle('üìù ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î')
//                                 .setDescription(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`)
//                                 .setColor('#FF0000')
//                         ],
//                         ephemeral: true
//                     });
//                     userGameSelections.delete(clientId);
//                 }
//             } else {
//                 console.log(`[INFO] Modal submit ignored, customId does not match: ${interaction.customId}`);
//             }
//         }
//     },
// };

